(ns conexp.sigmajs.base-test
  (:require [loom.graph :as lg])
  (:use clojure.test
        conexp.sigmajs.base))

(deftest test-graph->json
  (is
    (let [g (lg/digraph [:a :b] [:b :c])]
      (.matches (graph->json g) " *\\{
? *\"nodes\": *\\[
? *\\{
? *\"id\": *\":c\",(
? *\"label\": *\":c\",)?
? *\"x\": *\"?[0-9.]+\"?,
? *\"y\": *\"?[0-9.]+\"?(,
? *\"size: *\"?[0-9.]+\"?)?
? *\\},
? *\\{
? *\"id\": *\":b\",
? *\"label\": *\":b\",
? *\"x\": *\"?[0-9.]+\"?,
? *\"y\": *\"?[0-9.]+\"?(,
? *\"size: *\"?[0-9.]+\"?)?
? *\\},
? *\\{
? *\"id\": *\":a\",
? *\"label\": *\":a\",
? *\"x\": *\"?[0-9.]+\"?,
? *\"y\": *\"?[0-9.]+\"?(,
? *\"size: *\"?[0-9.]+\"?)?
? *\\}
? *\\],
? *\"edges\": *\\[
? *\\{
? *\"id\": *\".*\",
? *\"source\": *\":b\",
? *\"target\": *\":c\"
? *\\},
? *\\{
? *\"id\": *\".*\",
? *\"source\": *\":a\",
? *\"target\": *\":b\"
? *\\}
? *\\]
? *\\}"))))

;;;

nil
