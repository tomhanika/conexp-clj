#+property: header-args :wrap src text
#+property: header-args:text :eval never

* Working with Fuzzy Formal Contexts

~conexp-clj~ offers basic functionality for fuzzy formal concept analysis.
A fuzzy formal context consists of a set of objects, a set of attributes and an incidence rerlation that determines the degree to which an object is incident to each attribute.
A fuzzy formal context can be declared as follows:


#+begin_src
(def fctx (make-fuzzy-context [1 2 3 4]
                              [1 2 3 4 5 6]
                              [1.0 1.0 0.0 1.0 1.0 0.2,
                               1.0 0.4 0.3 0.8 0.5 1.0,
                               0.2 0.9 0.7 0.5 1.0 0.6,
                               1.0 1.0 0.8 1.0 1.0 0.5]))
#+end_src

#+begin_src
  |1   2   3   4   5   6   
--+------------------------
1 |1.0 1.0 0   1.0 1.0 0.2 
2 |1.0 0.4 0.3 0.8 0.5 1.0 
3 |0.2 0.9 0.7 0.5 1.0 0.6 
4 |1.0 1.0 0.8 1.0 1.0 0.5 
#+end_src

It can also be created from an existing many valued context:

#+begin_src
(def mvctx (make-mv-context [1 2 3 4]
                            [1 2 3 4 5 6]
                            #{[1 1 1.0]
                              [1 2 1.0]
                              [1 3 0.0]
                              [1 4 1.0]
                              [1 5 1.0]
                              [1 6 0.2]
                              [2 1 1.0]
                              [2 2 0.4]
                              [2 3 0.3]
                              [2 4 0.8]
                              [2 5 0.5]
                              [2 6 1.0]
                              [3 1 0.2]
                              [3 2 0.9]
                              [3 3 0.7]
                              [3 4 0.5]
                              [3 5 1.0]
                              [3 6 0.6]
                              [4 1 1.0]
                              [4 2 1.0]
                              [4 3 0.8]
                              [4 4 1.0]
                              [4 5 1.0]
                              [4 6 0.5]}))

(def fctx (mv->fuzzy-context-nc mvctx))
#+end_src

On the resulting fuzzy formal context, the fuzzy derivation operations can now be computed.
These operations rely on fuzzy sets. A fuzzy set contains each element to a certain membership degree:

#+begin_src
(def fset (make-fuzzy-set {1 0.6 2 0.4}))
#+end_src

This set contains the element ~1~ to a degree of 0.6 and ~2~ to a degree of 0.4 .

A fuzzy derivation can now be computed as follows:

#+begin_src
(fuzzy-object-derivation fctx fset lukasiewicz-norm)
#+end_src

#+begin_src
([1 1]
 [4 1]
 [6 0.6000000000000001]
 [3 0.3999999999999999]
 [2 1.0]
 [5 1])
#+end_src

The final argument of the ~fuzzy-object-derivation~ function is the norm used to compute the fuzzy set operations.
Available options are the ~lukasiewicz-norm~, the ~goedel-norm~ and the ~product-norm~.

The degree to which an implication holds in a fuzzy context can be computed using the ~validity~ method:


#+begin_src
(def fset1 (make-fuzzy-set {1 1}))
(def fset2 (make-fuzzy-set {2 1}))

(validity fctx fset1 fset2 product-norm)
#+end_src

#+begin_src
0.4
#+end_src
