#+property: header-args :wrap src text
#+property: header-args:text :eval never

* ~conexp-clj~ Tutorial at ICFCA 2023

This is a tutorial for the ICFCA 2023. It contains an example analysis of a 
formal context with the tool ~conexp-clj~.

** Basic FCA operations

*** Getting started

To run ~conexp-clj~, a Java Runtime Environment with version 1.8 or higher is necessary.
A pre-compiled version of ~conexp-clj~ is available [[https://algebra20.de/conexp/][here]]. The jar file can be used 
like this:

#+begin_src sh :exports both
java -jar conexp-clj-2.3.0-SNAPSHOT-standalone.jar
#+end_src

A prompt for ~conexp-clj~ like this will appear:

#+RESULTS:
#+begin_src text
conexp.main=>
#+end_src

*** Read a context
 
During the workshop, you can use your own context or, for example, the 
[[../../../testing-data/Living-Beings-and-Water.ctx][Living-Beings-and-Water]] or [[../../../testing-data/ben-and-jerrys-flavors.ctx][Ben-and-Jerrys]] context. The examples in this tutorial use the 
Ben-and-Jerrys ice cream context.

It is possible to read formal contexts in several formats, e.g., Burmeister and csv. 
A more detailed overview of the context formats can be found in [[../../IO.org][Input/Output of Formal Contexts]]. When reading a context, in most cases the format will be automatically determined:

#+begin_src clojure :results silent
(def ben-and-jerrys-ctx (read-context "path-to-file/ben-and-jerrys-flavors.ctx"))
#+end_src

If this does not work, you can specify the input format. A list of all input formats can be shown with 

#+begin_src clojure :exports both
(list-context-input-formats)
#+end_src

#+RESULTS:
#+begin_src text
(:burmeister :csv :conexp :named-binary-csv :anonymous-burmeister :graphml :simple :binary-csv :fcalgs :colibri :json :galicia)
#+end_src

You can read a context, e.g., in ~:burmeister~ format, by writing the format after the file path:

#+begin_src clojure :results silent
(def ben-and-jerrys-ctx (read-context "path-to-file/ben-and-jerrys-flavors.ctx" :burmeister))
#+end_src

To see the formal context, evaluate the ~ben-and-jerrys-ctx~ variable explicitly.

#+begin_src clojure :exports both
ben-and-jerrys-ctx
#+end_src

The ben-and-jerrys context contains ice cream types as objects and ingredients as 
attributes:

#+RESULTS:
#+begin_src text
                       |Brownie Caramel Caramel Ice Choco Ice Choco Pieces Dough Peanut Butter Peanut Ice Vanilla 
-----------------------+------------------------------------------------------------------------------------------
Caramel Chew Chew      |.       x       x           .         x            .     .             .          .       
Caramel Sutra          |.       x       x           x         x            .     .             .          .       
Cookie Dough           |.       .       .           .         x            x     .             .          x       
Fudge Brownie          |x       .       .           x         .            .     .             .          .       
Half Baked             |x       .       .           x         x            x     .             .          x       
Peanut Butter Cup      |.       .       .           .         x            .     x             x          .       
Salted Caramel Brownie |x       x       .           .         x            .     .             .          x       
#+end_src

*** Reduce, clarify

With ~context-reduced?~ and ~context-clarified?~, you can check if a context is reduced or clarified. 
The attributes, objects and the whole context can be reduced with ~reduce-attributes~, 
~reduce-objects~ and ~reduce-context~. The same applies to clarify. 

The whole example context can be clarified as follows:

#+begin_src clojure :exports both
(def ben-and-jerrys-clarified
  (clarify-context ben-and-jerrys-ctx)
ben-and-jerrys-clarified
#+end_src

#+RESULTS:
#+begin_src text
                       |Brownie Caramel Caramel Ice Choco Ice Choco Pieces Dough Peanut Ice Vanilla 
-----------------------+----------------------------------------------------------------------------
Caramel Chew Chew      |.       x       x           .         x            .     .          .       
Caramel Sutra          |.       x       x           x         x            .     .          .       
Cookie Dough           |.       .       .           .         x            x     .          x       
Fudge Brownie          |x       .       .           x         .            .     .          .       
Half Baked             |x       .       .           x         x            x     .          x       
Peanut Butter Cup      |.       .       .           .         x            .     x          .       
Salted Caramel Brownie |x       x       .           .         x            .     .          x       
#+end_src

As the attributes ~Peanut Butter~ and ~Peanut Ice~ have the same derivation, one of them (in this 
case ~Peanut Butter~) is removed.

*** Compute derivations

~conexp-clj~ provides functions to compute the attribute and object derivation.
In the following example, the object derivation of two types of ice cream is 
computed (to see what they have in common):

#+begin_src clojure :exports both
(object-derivation ben-and-jerrys-ctx #{"Cookie Dough" "Half Baked"})
#+end_src

#+RESULTS:
#+begin_src text
#{"Choco Pieces" "Dough" "Vanilla"}
#+end_src

The same can be done for a set of attributes with ~attribute-derivation~:

#+begin_src clojure :exports both
(attribute-derivation ben-and-jerrys-ctx #{"Choco Pieces" "Dough" "Vanilla"})
#+end_src

#+RESULTS:
#+begin_src text
#{"Half Baked" "Cookie Dough"}
#+end_src

This example shows that ~#{"Half Baked" "Cookie Dough"}~ is a closed set. 
To directly compute the closure of a set of objects, you can use

#+begin_src clojure :exports both
(context-object-closure ben-and-jerrys-ctx #{"Half Baked" "Cookie Dough"})
#+end_src

#+RESULTS:
#+begin_src text
#{"Half Baked" "Cookie Dough"}
#+end_src

The closure of a set of attributes can be computed with ~context-attribute-closure~.

#+begin_src clojure :exports both
(context-attribute-closure ben-and-jerrys-ctx #{"Choco Pieces" "Dough" "Vanilla"})
#+end_src

#+RESULTS:
#+begin_src text
#{"Choco Pieces" "Dough" "Vanilla"}
#+end_src

All formal concepts of the context can be computed as

#+begin_src clojure :exports both
(concepts ben-and-jerrys-ctx)
#+end_src

#+RESULTS:
#+begin_src text
([#{"Peanut Butter Cup" "Fudge Brownie" "Caramel Sutra" "Salted Caramel Brownie" "Caramel Chew Chew" "Half Baked" "Cookie Dough"} #{}]
 [#{"Fudge Brownie" "Caramel Sutra" "Half Baked"} #{"Choco Ice"}]
 [#{} #{"Choco Ice" "Peanut Ice" "Choco Pieces" "Brownie" "Dough" "Peanut Butter" "Caramel Ice" "Vanilla" "Caramel"}]
 [#{"Caramel Sutra" "Half Baked"} #{"Choco Ice" "Choco Pieces"}]
 [#{"Half Baked"} #{"Choco Ice" "Choco Pieces" "Brownie" "Dough" "Vanilla"}]
 [#{"Caramel Sutra"} #{"Choco Ice" "Choco Pieces" "Caramel Ice" "Caramel"}]
 [#{"Fudge Brownie" "Half Baked"} #{"Choco Ice" "Brownie"}]
 [#{"Peanut Butter Cup"} #{"Peanut Ice" "Choco Pieces" "Peanut Butter"}]
 [#{"Peanut Butter Cup" "Caramel Sutra" "Salted Caramel Brownie" "Caramel Chew Chew" "Half Baked" "Cookie Dough"} #{"Choco Pieces"}]
 [#{"Salted Caramel Brownie" "Half Baked"} #{"Choco Pieces" "Brownie" "Vanilla"}]
 [#{"Salted Caramel Brownie"} #{"Choco Pieces" "Brownie" "Vanilla" "Caramel"}]
 [#{"Half Baked" "Cookie Dough"} #{"Choco Pieces" "Dough" "Vanilla"}]
 [#{"Caramel Sutra" "Caramel Chew Chew"} #{"Choco Pieces" "Caramel Ice" "Caramel"}]
 [#{"Salted Caramel Brownie" "Half Baked" "Cookie Dough"} #{"Choco Pieces" "Vanilla"}]
 [#{"Caramel Sutra" "Salted Caramel Brownie" "Caramel Chew Chew"} #{"Choco Pieces" "Caramel"}]
 [#{"Fudge Brownie" "Salted Caramel Brownie" "Half Baked"} #{"Brownie"}])
#+end_src

*** Draw the concept lattice

To draw the concept lattice of a formal context, use these commands:
#+begin_src clojure :results silent
(use 'conexp.gui.draw)
(draw-concept-lattice ben-and-jerrys-ctx)
#+end_src

The lattice will appear in a new window.

#+caption: Concept lattice of ben-and-jerrys context
[[./images/ben-and-jerrys-lattice.png]]

In left bar of the ~Lattice~ window, you have several options, e.g., you can change the 
layout and turn on the labels. In addition, you have the option to show several 
valuations, like probability, distributivity and stability.

The ~ben-and-jerrys-lattice~ with DimDraw layout, labels and stability looks like this:

#+caption: Concept lattice of ben-and-jerrys context with DimDraw layout, labels and 
stability
[[./images/ben-and-jerrys-lattice-dimdraw-labels-stability.png]]

You can also create your own valuations, e.g., the extent and intent size of each formal 
concept.

#+begin_src clojure :result silent
(draw-concept-lattice ben-and-jerrys-ctx 
                      :value-fn (fn [concept]
                                  [(count (first c)) (count (second c))]))
#+end_src

After enabeling the labels, the concept lattice looks like this:

#+caption: Concept lattice of ben-and-jerrys context with manually set valuations
[[./images/ben-and-jerrys-lattice-manual_valuations.png]]

You can save the lattice in several formats. To do so, click ~Export to File~ (the second 
last button on the left). A new window opens, in which you can specify the path and format.
In the example, the lattice is saved in ~tikz~ format. It is important to write the file 
ending in the file name that matches the file type. Otherwise an error occurs.

#+caption: Window to save concept lattice in tikz format
[[./images/ben-and-jerrys-export-tikz.png]]

*** Computing implications - Canonical base

The canonical base of a context can be computed with:

#+begin_src clojure :exports both
(def ben-and-jerrys-implications (canonical-base ben-and-jerrys-ctx))
ben-and-jerrys-implications
#+end_src

#+RESULTS:
#+begin_src text
((#{"Caramel"} ⟶  #{"Choco Pieces"})
 (#{"Vanilla"} ⟶  #{"Choco Pieces"})
 (#{"Caramel Ice"} ⟶  #{"Choco Pieces" "Caramel"})
 (#{"Peanut Butter"} ⟶  #{"Peanut Ice" "Choco Pieces"})
 (#{"Dough"} ⟶  #{"Choco Pieces" "Vanilla"})
 (#{"Choco Pieces" "Vanilla" "Caramel"} ⟶  #{"Brownie"})
 (#{"Choco Pieces" "Brownie"} ⟶  #{"Vanilla"})
 (#{"Choco Pieces" "Brownie" "Caramel Ice" "Vanilla" "Caramel"} ⟶  #{"Choco Ice" "Peanut Ice" "Dough" "Peanut Butter"})
 (#{"Choco Pieces" "Brownie" "Dough" "Vanilla"} ⟶  #{"Choco Ice"})
 (#{"Peanut Ice"} ⟶  #{"Choco Pieces" "Peanut Butter"})
 (#{"Peanut Ice" "Choco Pieces" "Peanut Butter" "Caramel"} ⟶  #{"Choco Ice" "Brownie" "Dough" "Caramel Ice" "Vanilla"})
 (#{"Peanut Ice" "Choco Pieces" "Peanut Butter" "Vanilla"} ⟶  #{"Choco Ice" "Brownie" "Dough" "Caramel Ice" "Caramel"})
 (#{"Choco Ice" "Choco Pieces" "Caramel"} ⟶  #{"Caramel Ice"})
 (#{"Choco Ice" "Choco Pieces" "Vanilla"} ⟶  #{"Brownie" "Dough"})
 (#{"Choco Ice" "Peanut Ice" "Choco Pieces" "Peanut Butter"} ⟶  #{"Brownie" "Dough" "Caramel Ice" "Vanilla" "Caramel"}))
#+end_src

*** Outputs

Depending on the size of the contexts, the computation of the concept can take a long time. 
Therefore, the results can be saved so that the computation does not need to be repeated. 
For the output, the format needs to be specified. The formats to save a concept lattice are

#+begin_src clojure :exports both
(list-lattice-output-formats)
#+end_src

#+RESULTS:
#+begin_src text
(:simple :json)
#+end_src

A concept lattice can be saved in the ~:json~ format with the following command

#+begin_src clojure :result silent
(def ben-and-jerrys-lattice (concept-lattice ben-and-jerrys-ctx))
(write-lattice :json ben-and-jerrys-lattice "path/ben-and-jerrys-lattice.json")
#+end_src

(It can be loaded again with ~(read-lattice "path/ben-and-jerrys-lattice.json")~.)

For implications, there is only the ~:json~ output format. Implications can be saved via

#+begin_src clojure :result silent
(write-implication :json ben-and-jerrys-implications "path/ben-and-jerrys-implications.json") 
#+end_src

~conexp-clj~ also provides the option to save a whole Formal Concept Analysis in one 
file (in ~:json~) format. This FCA needs to contain a formal context. The ~:lattice~ 
and ~:implication-sets~ in the following map are optional.

#+begin_src clojure :result silent
(def ben-and-jerrys-fca {:context ben-and-jerrys-context
                         :lattice ben-and-jerrys-lattice
                         :implication-sets [ben-and-jerrys-implications]})
#+end_src

Note that such an FCA object can contain several implication sets. The 
~ben-and-jerrys-fca~ can be saved with

#+begin_src clojure :result silent
(write-fca :json ben-and-jerrys-fca "path/ben-and-jerrys-fca.json")
#+end_src


** Scaling data and scale-measures

~conexp-clj~ provides the functionality for conceptual scaling. For an example, 
load the smaller ~ben-and-jerrys-flavors-small.ctx~:

#+begin_src clojure :exports both
(def ben-and-jerrys-small-ctx (read-context "path-to-file/ben-and-jerrys-flavors-small.ctx"))
ben-and-jerrys-small-ctx
#+end_src

The ben-and-jerrys context contains the same ice cream types as objects, but a smaller 
set of flavors as attributes:

#+RESULTS:
#+begin_src text
                       |Brownie Caramel Choco Dough Peanut Vanilla 
-----------------------+-------------------------------------------
Caramel Chew Chew      |.       x       x     .     .      .       
Caramel Sutra          |.       x       x     .     .      .       
Cookie Dough           |.       .       x     x     .      x       
Fudge Brownie          |x       .       x     .     .      .       
Half Baked             |x       .       x     x     .      x       
Peanut Butter Cup      |.       .       x     .     x      .       
Salted Caramel Brownie |x       x       x     .     .      x       
#+end_src

To check if this smaller context is a scale of the ~ben-and-jerrys-ctx~, the conceptual 
scaling error is computed:

#+begin_src clojure :exports both
(use 'conexp.fca.smeasure)
(conceptual-scaling-error (make-smeasure-nc ben-and-jerrys-ctx ben-and-jerrys-small-ctx identity))
#+end_src

#+RESULTS:
#+begin_src text
0
#+end_src

As the error is 0, the ~ben-and-jerrys-small-ctx~ is a scale of the ~ben-and-jerrys-ctx~.

Another context uses the same ice cream types, but allergens instead of flavors.

#+begin_src clojure :exports both
(def ben-and-jerrys-allergens-ctx (read-context "path-to-file/ben-and-jerrys-allergens.ctx"))
ben-and-jerrys-allergens-ctx
#+end_src

#+RESULTS:
#+begin_src text
                       |almond barley egg milk peanuts soy wheat 
-----------------------+-----------------------------------------
Caramel Chew Chew      |.      .      x   x    .       x   .     
Caramel Sutra          |x      .      x   x    .       x   .     
Cookie Dough           |.      .      x   x    .       x   x     
Fudge Brownie          |.      x      x   x    .       .   x     
Half Baked             |.      x      x   x    .       x   x     
Peanut Butter Cup      |.      .      x   x    x       x   .     
Salted Caramel Brownie |.      .      x   x    .       x   x    
#+end_src

You can compute the conceptual scaling error in the same way as for the ~ben-and-jerrys-small-ctx~.

#+begin_src clojure :exports both
(conceptual-scaling-error (make-smeasure-nc ben-and-jerrys-ctx ben-and-jerrys-allergens-ctx identity))
#+end_src

#+RESULTS:
#+begin_src text
1
#+end_src

In this case, the error is 1 and therefore the allergens context is not a scale of the 
original ~ben-and-jerrys-ctx~.

To get more information about the scaling error, you can use

#+begin_src clojure :exports both
(error-in-smeasure (make-smeasure-nc ben-and-jerrys-ctx ben-and-jerrys-allergens-ctx identity))
#+end_src

#+RESULTS:
#+begin_src text
(#{"Fudge Brownie" "Salted Caramel Brownie" "Half Baked" "Cookie Dough"})
#+end_src

This set of objects is closed in ~ben-and-jerrys-allergens-ctx~, but not in ~ben-and-jerrys-ctx~,
as can be seen with

#+begin_src clojure :exports both
(context-object-closure ben-and-jerrys-ctx 
                        #{"Fudge Brownie" "Salted Caramel Brownie" "Half Baked" "Cookie Dough"})
#+end_src

#+RESULTS:
#+begin_src text
#{"Peanut Butter Cup" "Fudge Brownie" "Caramel Sutra"
  "Salted Caramel Brownie" "Caramel Chew Chew" "Half Baked"
  "Cookie Dough"}
#+end_src


** Attribute exploration

~conexp-clj~ provides a function for attribute exploration. 

#+begin_src clojure :results silent
(attribute-exploration :context ben-and-jerrys-small-ctx)
#+end_src

The following attribute exploration is interactive. For a suggested implication, the 
user accepts or rejects it with ~yes~ or ~no~:

#+begin_src text
Does the implication (#{} ⟶  #{Choco}) hold? no
#+end_src

If an implication is rejected, a counterexample needs to be provided. First, the object 
of the counterexample needs to be given. In this case, we give an additional "Peanut" 
ice cream.

#+begin_src text
Then please provide a counterexample
counterexample> object
Please enter new object: "Peanut"
#+end_src

After that, the attributes of the counterexample are given in the following input format.

#+begin_src text
counterexample> attributes
Please enter new attributes: "Peanut" "Vanilla"
#+end_src

The process of providing a counterexample is finished with the input ~q~. It is possible 
to give another counterexample.

#+begin_src text
counterexample> q
Do you want to give another counterexample? no
#+end_src

The following example shows an attribute exploration of the ~ben-and-jerrys-small-ctx~. 
In the end, the attribute exploration returns the list of learned implications and the 
new context.

#+begin_src text
conexp.main=> (explore-attributes :context ben-and-jerrys-small-ctx)
Does the implication (#{} ⟶  #{Choco}) hold? no
Then please provide a counterexample
counterexample> object
Please enter new object: "Peanut"
counterexample> attributes
Please enter the attributes the new object should have: "Peanut" "Vanilla"
counterexample> q
Do you want to give another counterexample? no
Does the implication (#{Caramel} ⟶  #{Choco}) hold? yes
Does the implication (#{Dough} ⟶  #{Choco Vanilla}) hold? yes
Does the implication (#{Brownie} ⟶  #{Choco}) hold? yes
Does the implication (#{Choco Vanilla Caramel} ⟶  #{Brownie}) hold? yes
Does the implication (#{Choco Peanut Caramel} ⟶  #{Brownie Dough Vanilla}) hold? yes
Does the implication (#{Choco Peanut Vanilla} ⟶  #{Brownie Dough Caramel}) hold? yes
Does the implication (#{Choco Brownie Caramel} ⟶  #{Vanilla}) hold? yes
Does the implication (#{Choco Brownie Peanut} ⟶  #{Dough Vanilla Caramel}) hold? yes
Does the implication (#{Choco Brownie Dough Vanilla Caramel} ⟶  #{Peanut}) hold? yes
{:implications #{(#{"Choco" "Peanut" "Caramel"} ⟶  #{"Brownie" "Dough" "Vanilla"})
                 (#{"Brownie"} ⟶  #{"Choco"})
                 (#{"Choco" "Brownie" "Caramel"} ⟶  #{"Vanilla"})
                 (#{"Caramel"} ⟶  #{"Choco"})
                 (#{"Choco" "Vanilla" "Caramel"} ⟶  #{"Brownie"})
                 (#{"Choco" "Brownie" "Dough" "Vanilla" "Caramel"} ⟶  #{"Peanut"})
                 (#{"Choco" "Peanut" "Vanilla"} ⟶  #{"Brownie" "Dough" "Caramel"})
                 (#{"Dough"} ⟶  #{"Choco" "Vanilla"})
                 (#{"Choco" "Brownie" "Peanut"} ⟶  #{"Dough" "Vanilla" "Caramel"})},
:context               |Brownie Caramel Choco Dough Peanut Vanilla 
-----------------------+-------------------------------------------
Caramel Chew Chew      |.       x       x     .     .      .       
Caramel Sutra          |.       x       x     .     .      .       
Cookie Dough           |.       .       x     x     .      x       
Fudge Brownie          |x       .       x     .     .      .       
Half Baked             |x       .       x     x     .      x       
Peanut Butter Cup      |.       .       x     .     x      .       
Peanut                 |.       .       .     .     x      x       
Salted Caramel Brownie |x       x       x     .     .      x       
}
#+end_src
