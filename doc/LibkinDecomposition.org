#+property: header-args :wrap src text
#+property: header-args:text :eval never

* Libkin Decomposition

~conexp-clj~ allows for the computation of Libkin Decompositions of lattices.
For an explanation of the concept consult "Direct product decompositions of lattices, closures and relation schemes" by Leonid Libkin

Some of the following functions require the ~decompositions~ namespace:


#+begin_src clojure
(use 'conexp.fca.decompositions)
#+end_src

(use 'conexp.fca.decompositions)

We will consider the following lattice as an example:

#+begin_src clojure :exports both
(def ctx (read-context "testing-data/drive_concepts_for_motorcars.cxt"))
(def lat (concept-lattice ctx))
#+end_src

[[./images/car-lattice.png]]

A Libkin decomposition of a lattice L is a pair of sublattices of L, whose product is isomorphic to L.
Libkin decompositions are each induced by a decomposition pair, a neutral element in L and its Complement.

All decomposition pairs of the lattice can be computed using the method ~libkin-decomposition-pairs~:

#+begin_src clojure :exports both
(def pairs (libkin-decomposition-pairs lat))
#+end_src

#+RESULTS:
#+begin_src text
([[#{"Conventional" "All-wheel" "Rear-wheel" "Mid-engine"} #{"Dl+"}]
  [#{"Front-wheel"}
   #{"E+" "C-l" "De+" "C-vl" "E++" "Dl-" "S-u" "R+" "M+" "R++"}]]
 [[#{}
   #{"E+" "C-l" "E-" "C-h" "De+" "Dl+" "C-vl" "E++" "S-u/n" "Dl++"
     "Dl-" "M++" "S-u" "R+" "S-n" "S-o" "De-" "De++" "M+" "M--" "R--"
     "C-m" "M-" "R++" "E--"}]
  [#{"Conventional" "All-wheel" "Rear-wheel" "Mid-engine"
     "Front-wheel"}
   #{}]]
 [[#{"Conventional" "All-wheel" "Rear-wheel" "Mid-engine"
     "Front-wheel"}
   #{}]
  [#{}
   #{"E+" "C-l" "E-" "C-h" "De+" "Dl+" "C-vl" "E++" "S-u/n" "Dl++"
     "Dl-" "M++" "S-u" "R+" "S-n" "S-o" "De-" "De++" "M+" "M--" "R--"
     "C-m" "M-" "R++" "E--"}]]
 [[#{"Front-wheel"}
   #{"E+" "C-l" "De+" "C-vl" "E++" "Dl-" "S-u" "R+" "M+" "R++"}]
  [#{"Conventional" "All-wheel" "Rear-wheel" "Mid-engine"} #{"Dl+"}]])
#+end_src

Computing the order ideal of both entries of the pair yields the two sublattices forming the decomposition.

The lattices implied by the decomposition through a specific decomposition pair can be exlicitely generated using ~libkin-decomposition-lattices~:

#+begin_src clojure :exports both
(def lattice-pair (libkin-decomposition-lattices lat [[#{"Conventional" "All-wheel" "Rear-wheel" "Mid-engine"} #{"Dl+"}]
  [#{"Front-wheel"}
   #{"E+" "C-l" "De+" "C-vl" "E++" "Dl-" "S-u" "R+" "M+" "R++"}]]))
#+end_src

These lattices may be visualized as described in Concept-Lattices.org .

#+begin_src text
(draw-lattice (first lattice-pair))
(draw-lattice (last lattice-pair))
#+end_src

[[./images/decomposed-lattice1.png]]
[[./images/decomposed-lattice2.png]]

#+begin_src text
(def prod-lat (lattice-product (first lattice-pair) (last lattice-pair)))
(draw-lattice prod-lat)
#+end_src

The product of these lattices yields a lattice isomorphic to L:

[[./images/prod-lattice.png]]